@{
    ViewData["Title"] = "Input Main";
}
<!-- Basic Input -->
<!-- B1 -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Nhập thông số</h4>
            </div><!-- end card header -->
            <div class="card-body align-items-center d-flex">
                <!-- With Controls -->
                <!-- Input with Placeholder -->
                <form action="javascript:void(0);">
                    <div class="row">
                        <div class="col-6">
                            <div class="mb-3">
                                <label for="forceInput" class="form-label">Lực vòng trên băng tải F (N)</label>
                                <input type="number" class="form-control" id="forceInput"
                                    placeholder="Nhập lực vòng (N)">
                                <small id="forceSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-3">
                                <label for="speedInput" class="form-label">Vận tốc băng tải v (m/s)</label>
                                <input type="number" class="form-control" id="speedInput"
                                    placeholder="Nhập vận tốc (m/s)">
                                <small id="speedSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->



                        <div class="col-6">
                            <div class="mb-3">
                                <label for="shaftSelection" class="form-label">Chọn loại trục</label>
                                <select class="form-select" id="shaftSelection">
                                    <option selected>Chọn loại trục</option>
                                    <option value="1">Trục tang quay</option>
                                </select>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-3">
                                <label for="diameterInput" class="form-label">Đường kính tang D (mm)</label>
                                <input type="number" class="form-control" id="diameterInput"
                                    placeholder="Nhập đường kính (mm)">
                                <small id="diameterSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->


                        <div class="col-6">
                            <div class="mb-3">
                                <label for="serviceTimeInput" class="form-label">Thời gian phục vụ L (năm)</label>
                                <input type="number" class="form-control" id="serviceTimeInput"
                                    placeholder="Nhập thời gian phục vụ (năm)">
                                <small id="serviceTimeSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-3">
                                <label for="workDaysInput" class="form-label">Số ngày làm việc mỗi năm</label>
                                <input type="number" class="form-control" id="workDaysInput"
                                    placeholder="Nhập số ngày làm việc">
                                <small id="workDaysSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-3">
                                <label for="workHoursInput" class="form-label">Số giờ làm việc mỗi ngày</label>
                                <input type="number" class="form-control" id="workHoursInput"
                                    placeholder="Nhập số giờ làm việc">
                                <small id="workHoursSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">

                            <label class="form-label">Danh sách tải (T, t)</label>

                            <div class="d-flex mb-2">
                                <input type="number" class="form-control me-2" id="loadTInput" data-index="0" placeholder="Nhập tải T">
                                <input type="number" class="form-control me-2" id="loadtInput"
                                    placeholder="Nhập thời gian t" data-index="0">
                                <button type="button" class="btn btn-success me-2" onclick="addBadge()">+</button>
                            </div>


                        </div>

                        <div class="col-6">
                            <div class="mb-3">
                                <label for="loadTypesInput" class="form-label">Số loại tải khác nhau (n)</label>
                                <input type="number" class="form-control" id="loadTypesInput"
                                    placeholder="Nhập số loại tải" min="1" value="1" readonly>
                            </div>
                        </div>



                        <div class="col-6 mb-3">
                            <div class="mb-3">

                                <div id="loadBadges" class="mt-3 d-flex flex-wrap gap-2"></div>
                            </div>
                        </div>




                        <div class="col-6">
                            <div class="mb-4">
                                <label for="startupMoment" class="form-label">Mômen mở máy</label>
                                <input type="number" class="form-control" id="startupMoment"
                                    placeholder="Nhập mômen mở máy">
                                <small id="startupMomentSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-4">
                                <label for="loadMoment" class="form-label">Mômen tải</label>
                                <input type="number" class="form-control" id="loadMoment" placeholder="Nhập mômen tải">
                                <small id="loadMomentSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-3">
                                <label for="transSelection" class="form-label">Chọn bộ truyền</label>
                                <select class="form-select" id="transSelection">
                                    <option selected disabled>Chọn bộ truyền</option>
                                    <!-- <option value="belt">Belt</option> -->
                                    <option value="chain">Chain</option>
                                    <!-- <option value="gear">Gear</option> -->
                                </select>
                            </div>
                        </div>


                        <div class="col-12">
                            <div class="text-center mt-4">
                                <button type="submit" class="btn btn-success" id="submitButton">Xác nhận</button>
                            </div>
                        </div>
                    </div><!--end row-->
                </form>
            </div><!-- end card-body -->
        </div><!-- end card -->
    </div>
</div>



<!-- Khu vực hiển thị dữ liệu đã lưu -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Dữ liệu đã lưu từ LocalStorage</h4>
            </div><!-- end card header -->
            <div class="card-body">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Lực vòng (N)</th>
                            <th>Vận tốc (m/s)</th>
                            <th>Loại trục</th>
                            <th>Đường kính (mm)</th>
                            <th>Thời gian phục vụ (năm)</th>
                            <th>Số ngày làm việc</th>
                            <th>Số giờ làm việc</th>
                            <th>Mômen mở máy</th>
                            <th>Mômen tải</th>
                            <th>Hệ số quá tải</th>
                            <th>Hiệu suất chung</th>
                            <th>Hiệu suất cần thiết của động cơ</th>
                            <th>Danh sách tải</th>
                            <th>Bộ truyền</th>
                            <th>Nút</th>
                        </tr>
                    </thead>
                    <tbody id="savedDataTable">
                        <!-- Dữ liệu sẽ được thêm vào đây từ LocalStorage -->
                    </tbody>
                </table>
            </div><!-- end card-body -->
        </div><!-- end card -->
    </div>
</div>



<script>
    let loads = [];
    let pdfContent = {};

    function addBadge() {
        const Torch = document.getElementById('loadTInput').value;
        const time = document.getElementById('loadtInput').value;

        if (Torch && time) {
            loads.push({ Torch, time }); // thêm mới chứ không ghi đè
            updateBadges();
        }
    }


    function removeBadge(index) {
        loads.splice(index, 1);
        updateBadges();
    }

    /*function updateBadges() {
        const badgesDiv = document.getElementById("loadBadges");
        const loadTypesInput = document.getElementById("loadTypesInput");
        badgesDiv.innerHTML = "";

        loads.forEach((load, index) => {
            const badge = document.createElement("span");
            badge.className = "badge border border-info text-info mt-3 fs-5 rounded";
            badge.innerHTML = `T${index + 1}: ${load.Torch}, t${index + 1}: ${load.time} <span class="text-danger ms-1" style="cursor: pointer;" onclick="removeBadge(${index})">x</span>`;
            badgesDiv.appendChild(badge);
        });

        loadTypesInput.value = loads.length; // Cập nhật số loại tải
    }*/

    function updateBadges() {
        const badgesDiv = document.getElementById("loadBadges");
        const loadTypesInput = document.getElementById("loadTypesInput");

        badgesDiv.innerHTML = ""; // reset

        loads.forEach((load, index) => {
            const badge = document.createElement("span");
            badge.className = "badge border border-info text-info mt-3 fs-5 rounded px-2 py-1";
            badge.innerHTML = `
                T${index + 1}: ${load.Torch}, t${index + 1}: ${load.time}
                <span class="text-danger ms-1" style="cursor: pointer;" onclick="removeBadge(${index})">x</span>
            `;
            badgesDiv.appendChild(badge);
        });

        loadTypesInput.value = loads.length;
    }


    document.getElementById('submitButton').addEventListener('click', function (e) {
        e.preventDefault(); // Ngăn form reload trang
        submitFormData(); // Gọi hàm xử lý dữ liệu
    });

    function submitFormData() {
        // Lấy giá trị từ các input
        const force = parseFloat(document.getElementById('forceInput').value) || 0;
        const speed = parseFloat(document.getElementById('speedInput').value) || 0;
        const shaftType = document.getElementById('shaftSelection').value;
        const diameter = parseFloat(document.getElementById('diameterInput').value) || 0;
        const serviceTime = parseFloat(document.getElementById('serviceTimeInput').value) || 0;
        const workDays = parseFloat(document.getElementById('workDaysInput').value) || 0;
        const workHours = parseFloat(document.getElementById('workHoursInput').value) || 0;
        const startupMoment = parseFloat(document.getElementById('startupMoment').value) || 0;
        const loadMoment = parseFloat(document.getElementById('loadMoment').value) || 0;
        const transType = document.getElementById('transSelection').value; // Lấy bộ truyền

        // Kiểm tra danh sách tải có tồn tại không
        if (!Array.isArray(loads) || loads.length === 0) {
            alert("Danh sách tải không hợp lệ!");
            return;
        }

        // Tạo danh sách T và t
        const Torchlist = loads.map(load => parseFloat(load.Torch) || 0);
        const tlist = loads.map(load => parseFloat(load.time) || 0);

        // Danh sách tải đầy đủ
        const loadData = loads.map((load, index) => ({
            Id: index + 1,
            Torch: parseFloat(load.Torch) || 0,
            time: parseFloat(load.time) || 0
        }));

        if (loadMoment === 0) return;

        // Tính loadN
        let loadN = Math.round((startupMoment / loadMoment) * 100) / 100; // Làm tròn 2 số thập phân

        // Tạo object dữ liệu
        const formData = {
            force,
            speed,
            shaftType,
            diameter,
            serviceTime,
            workDays,
            workHours,
            startupMoment,
            loadMoment,
            loadData,
            Torchlist,
            tlist,
            transType
        };

        console.log('Dữ liệu nhập vào:', formData);

        // Gửi dữ liệu lên server
        fetch('/Input/Submit', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        }).then(response => {
                if (!response.ok) {
                    throw new Error(`Lỗi HTTP ${response.status}: ${response.statusText}`);
                }
                return response.json();
            })
            .then(data => {
                // Lưu vào localStorage
                let storedData = JSON.parse(localStorage.getItem("inputData")) || [];
                storedData.push(data);
                localStorage.setItem("inputData", JSON.stringify(storedData));

                alert("Dữ liệu đã được lưu vào Local Storage!");

                localStorage.setItem("lastInputData", JSON.stringify({
                    ...formData,
                    ...data
                }));

                alert("Đang chuyển sang trang kết quả...");
                setTimeout(() => {
                    window.location.href = "/Input/Result";
                }, 1000);
            })
            .catch(error => {
                console.error("Lỗi khi gửi dữ liệu:", error);
                alert(`Có lỗi xảy ra: ${error.message}`);
            });


    }


    document.addEventListener('DOMContentLoaded', function () {
        displayStoredData();
    });

    function displayStoredData() {
        const savedData = JSON.parse(localStorage.getItem("inputData")) || [];
        console.log("Dữ liệu trong localStorage:", savedData);

        const savedDataTable = document.getElementById("savedDataTable");
        savedDataTable.innerHTML = "";

        savedData.forEach((item, index) => {
            const row = document.createElement("tr");

            row.innerHTML = `
                <td>${item.force}</td>
                <td>${item.speed}</td>
                <td>${item.shaftType}</td>
                <td>${item.diameter}</td>
                <td>${item.serviceTime}</td>
                <td>${item.workDays}</td>
                <td>${item.workHours}</td>
                <td>${item.startupMoment}</td>
                <td>${item.loadMoment}</td>
                <td>${item.overloadFactor}</td>
                <td>${item.overallEfficiency}</td>
                <td>${item.requiredMotorEfficiency}</td>
                <td>
                    ${item.loadData.map(load => `T${load.id}: ${load.torch}, t${load.id}: ${load.time}`).join(', ')}
                </td>
                <td>${item.transType}</td>
                <td><button class="btn btn-primary btn-sm select-btn" data-index="${index}">Chọn</button></td>
            `;

            savedDataTable.appendChild(row);
        });

        // Gán sự kiện cho nút chọn sau khi thêm dữ liệu
        const buttons = document.querySelectorAll(".select-btn");
        buttons.forEach(button => {
            button.addEventListener("click", function () {
                const index = this.getAttribute("data-index");
                const selectedItem = savedData[index];
                populateForm(selectedItem);
            });
        });
    }

/*
    function populateForm(item) {
        document.getElementById("forceInput").value = item.force || '';
        document.getElementById("speedInput").value = item.speed || '';
        document.getElementById("shaftSelection").value = item.shaftType || '';
        document.getElementById("diameterInput").value = item.diameter || '';
        document.getElementById("serviceTimeInput").value = item.serviceTime || '';
        document.getElementById("workDaysInput").value = item.workDays || '';
        document.getElementById("workHoursInput").value = item.workHours || '';
        document.getElementById("startupMoment").value = item.startupMoment || '';
        document.getElementById("loadMoment").value = item.loadMoment || '';
        document.getElementById("transSelection").value = item.transType || '';

        // Cập nhật mảng loads toàn cục
        loads = item.loadData.map((load, idx) => ({
            Torch: load.torch || load.Torch,  // tùy theo key trong localStorage
            time: load.time
        }));

        // Cập nhật hiển thị badge
        updateBadges();
    } */

    function populateForm(item) {
        document.getElementById("forceInput").value = item.force || '';
        document.getElementById("speedInput").value = item.speed || '';
        document.getElementById("shaftSelection").value = item.shaftType || '';
        document.getElementById("diameterInput").value = item.diameter || '';
        document.getElementById("serviceTimeInput").value = item.serviceTime || '';
        document.getElementById("workDaysInput").value = item.workDays || '';
        document.getElementById("workHoursInput").value = item.workHours || '';
        document.getElementById("startupMoment").value = item.startupMoment || '';
        document.getElementById("loadMoment").value = item.loadMoment || '';
        document.getElementById("transSelection").value = item.transType || '';

        // Gán lại mảng loads từ dữ liệu LocalStorage
        loads = item.loadData.map((load) => ({
            Torch: load.torch || load.Torch,
            time: load.time
        }));

        updateBadges(); // cập nhật lại UI
    }





    function postPartialInput(field, value) {
        if (isNaN(value)) return; // Ngăn gửi nếu không phải số

        const partialData = {
            field,
            value,
            existingData: gatherExistingData() // nếu có
        };

        fetch('/Input/SuggestNext', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(partialData)
        })
        .then(res => {
            if (!res.ok) throw new Error('Bad response');
            return res.json();
        })
        .then(suggestion => {
            console.log("Gợi ý từ server:", suggestion);
            showSuggestion(suggestion); // lỗi số 2 nếu hàm này chưa tồn tại
        })
        .catch(err => {
            console.error("Lỗi khi gửi dữ liệu gợi ý:", err);
        });
    }


    function gatherExistingData() {
        const data = {};

        const getVal = id => parseFloat(document.getElementById(id)?.value) || undefined;

        data.force = getVal('forceInput');
        data.speed = getVal('speedInput');
        data.diameter = getVal('diameterInput');
        data.serviceTime = getVal('serviceTimeInput');
        data.workDays = getVal('workDaysInput');
        data.workHours = getVal('workHoursInput');
        data.startupMoment = getVal('startupMoment');
        data.loadMoment = getVal('loadMoment');

        return data;
    }

    function showSuggestion(data) {
        const suggestId = data.field + 'Suggestion';
        const suggestEl = document.getElementById(suggestId);
        if (suggestEl) {
            suggestEl.innerText = data.suggestion;
        }
    }

    document.getElementById('forceInput').addEventListener('blur', function () {
        const value = parseFloat(this.value);
        postPartialInput('force', value);
    });

    document.getElementById('speedInput').addEventListener('blur', function () {
        const value = parseFloat(this.value);
        postPartialInput('speed', value);
    });

    document.getElementById('diameterInput').addEventListener('blur', function () {
        const value = parseFloat(this.value);
        postPartialInput('diameter', value);
    });

    document.getElementById('serviceTimeInput').addEventListener('blur', function () {
        const value = parseFloat(this.value);
        postPartialInput('serviceTime', value);
    });

    document.getElementById('workDaysInput').addEventListener('blur', function () {
        const value = parseFloat(this.value);
        postPartialInput('workDays', value);
    });

    document.getElementById('workHoursInput').addEventListener('blur', function () {
        const value = parseFloat(this.value);
        postPartialInput('workHours', value);
    });

    document.getElementById('startupMoment').addEventListener('blur', function () {
        const value = parseFloat(this.value);
        postPartialInput('startupMoment', value);
    });

    document.getElementById('loadMoment').addEventListener('blur', function () {
        const value = parseFloat(this.value);
        postPartialInput('loadMoment', value);
    });

    document.querySelectorAll('.torch-input').forEach((el, idx) => {
        el.addEventListener('blur', function () {
            const value = parseFloat(this.value);
            const existingData = gatherExistingData(); // Lấy toàn bộ dữ liệu hệ thống
            if (!isNaN(value)) {
                postPartialInput('torch', value, existingData);
            }
        });
    });

    document.querySelectorAll('.t-input').forEach((el, idx) => {
        el.addEventListener('blur', function () {
            const value = parseFloat(this.value);
            const existingData = gatherExistingData();
            if (!isNaN(value)) {
                postPartialInput('t', value, existingData);
            }
        });
    });



    //<!-- Gắn sự kiện blur (hoặc change) cho -->






</script>
