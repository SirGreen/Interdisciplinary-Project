@{
    ViewData["Title"] = "Input Main";
}
<!-- Basic Input -->
<!-- B1 -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Nhập thông số</h4>
            </div><!-- end card header -->
            <div class="card-body align-items-center d-flex">
                <!-- With Controls -->
                <!-- Input with Placeholder -->
                <form action="javascript:void(0);">
                    <div class="row">
                        <div class="col-6">
                            <div class="mb-3">
                                <label for="forceInput" class="form-label">Lực vòng trên băng tải F (N)</label>
                                <input type="number" class="form-control" id="forceInput"
                                    placeholder="Nhập lực vòng (N)">
                                <small id="forceSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-3">
                                <label for="speedInput" class="form-label">Vận tốc băng tải v (m/s)</label>
                                <input type="number" class="form-control" id="speedInput"
                                    placeholder="Nhập vận tốc (m/s)">
                                <small id="speedSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->



                        <div class="col-6">
                            <div class="mb-3">
                                <label for="shaftSelection" class="form-label">Chọn loại trục</label>
                                <select class="form-select" id="shaftSelection">
                                    <option selected>Chọn loại trục</option>
                                    <option value="1">Trục tang quay</option>
                                </select>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-3">
                                <label for="diameterInput" class="form-label">Đường kính tang D (mm)</label>
                                <input type="number" class="form-control" id="diameterInput"
                                    placeholder="Nhập đường kính (mm)">
                                <small id="diameterSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->


                        <div class="col-6">
                            <div class="mb-3">
                                <label for="serviceTimeInput" class="form-label">Thời gian phục vụ L (năm)</label>
                                <input type="number" class="form-control" id="serviceTimeInput"
                                    placeholder="Nhập thời gian phục vụ (năm)">
                                <small id="serviceTimeSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-3">
                                <label for="workDaysInput" class="form-label">Số ngày làm việc mỗi năm</label>
                                <input type="number" class="form-control" id="workDaysInput"
                                    placeholder="Nhập số ngày làm việc">
                                <small id="workDaysSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-3">
                                <label for="workHoursInput" class="form-label">Số giờ làm việc mỗi ngày</label>
                                <input type="number" class="form-control" id="workHoursInput"
                                    placeholder="Nhập số giờ làm việc">
                                <small id="workHoursSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <label class="form-label">Danh sách tải (T, t)</label>
                            <div class="d-flex mb-2">
                                <input type="number" class="form-control me-2" id="loadTInput" data-index="0"
                                    placeholder="Nhập tải T">
                                <input type="number" class="form-control me-2" id="loadtInput"
                                    placeholder="Nhập thời gian t" data-index="0">
                                <button type="button" class="btn btn-success me-2" onclick="addBadge()">+</button>
                            </div>
                            <!-- Thêm phần tử để hiển thị gợi ý -->
                            <div id="loadSuggestions" class="mt-2"></div>
                        </div>


                        <div class="col-6">
                            <div class="mb-3">
                                <label for="loadTypesInput" class="form-label">Số loại tải khác nhau (n)</label>
                                <input type="number" class="form-control" id="loadTypesInput"
                                    placeholder="Nhập số loại tải" min="1" value="1" readonly>
                            </div>
                        </div>



                        <div class="col-6 mb-3">
                            <div class="mb-3">

                                <div id="loadBadges" class="mt-3 d-flex flex-wrap gap-2"></div>
                            </div>
                        </div>




                        <div class="col-6">
                            <div class="mb-4">
                                <label for="startupMoment" class="form-label">Mômen mở máy</label>
                                <input type="number" class="form-control" id="startupMoment"
                                    placeholder="Nhập mômen mở máy">
                                <small id="startupMomentSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-4">
                                <label for="loadMoment" class="form-label">Mômen tải</label>
                                <input type="number" class="form-control" id="loadMoment" placeholder="Nhập mômen tải">
                                <small id="loadMomentSuggestion" class="form-text text-muted"></small>
                            </div>
                        </div><!--end col-->

                        <div class="col-6">
                            <div class="mb-3">
                                <label for="transSelection" class="form-label">Chọn bộ truyền</label>
                                <select class="form-select" id="transSelection">
                                    <option selected disabled>Chọn bộ truyền</option>
                                    <!-- <option value="belt">Belt</option> -->
                                    <option value="chain">Chain</option>
                                    <!-- <option value="gear">Gear</option> -->
                                </select>
                            </div>
                        </div>


                        <div class="col-12">
                            <div class="text-center mt-4">
                                <button type="submit" class="btn btn-success" id="submitButton">Xác nhận</button>
                            </div>
                        </div>
                    </div><!--end row-->
                </form>
            </div><!-- end card-body -->
        </div><!-- end card -->
    </div>
</div>



<!-- Khu vực hiển thị dữ liệu đã lưu -->
<div class="row">
    <div class="col-12">
        <div class="card">
            <div class="card-header align-items-center d-flex">
                <h4 class="card-title mb-0 flex-grow-1">Dữ liệu đã lưu từ LocalStorage</h4>
            </div><!-- end card header -->
            <div class="card-body">
                <table class="table table-bordered">
                    <thead>
                        <tr>
                            <th>Lực vòng (N)</th>
                            <th>Vận tốc (m/s)</th>
                            <th>Loại trục</th>
                            <th>Đường kính (mm)</th>
                            <th>Thời gian phục vụ (năm)</th>
                            <th>Số ngày làm việc</th>
                            <th>Số giờ làm việc</th>
                            <th>Mômen mở máy</th>
                            <th>Mômen tải</th>
                            <th>Hệ số quá tải</th>
                            <th>Hiệu suất chung</th>
                            <th>Hiệu suất cần thiết của động cơ</th>
                            <th>Danh sách tải</th>
                            <th>Bộ truyền</th>
                            <th>Nút</th>
                        </tr>
                    </thead>
                    <tbody id="savedDataTable">
                        <!-- Dữ liệu sẽ được thêm vào đây từ LocalStorage -->
                    </tbody>
                </table>
            </div><!-- end card-body -->
        </div><!-- end card -->
    </div>
</div>



<script>
    let loads = [];
    let pdfContent = {};

    // Hàm thêm badge vào danh sách
    function addBadge() {
        const Torch = document.getElementById('loadTInput').value;
        const time = document.getElementById('loadtInput').value;

        // Kiểm tra xem giá trị nhập có hợp lệ không
        if (Torch && time) {
            loads.push({ Torch, time }); // thêm mới chứ không ghi đè
            updateBadges();
        }
    }

    // Hàm xóa badge
    function removeBadge(index) {
        loads.splice(index, 1);
        updateBadges();
    }

    // Hàm cập nhật badges và gợi ý
    function updateBadges() {
        const badgesDiv = document.getElementById("loadBadges");
        const forceInput = document.getElementById("forceInput");
        const speedInput = document.getElementById("speedInput");
        const forceSuggestion = document.getElementById("forceSuggestion");
        const speedSuggestion = document.getElementById("speedSuggestion");

        badgesDiv.innerHTML = ""; // reset

        // Cập nhật danh sách các tải (loads)
        loads.forEach((load, index) => {
            const badge = document.createElement("span");
            badge.className = "badge border border-info text-info mt-3 fs-5 rounded px-2 py-1";
            badge.innerHTML = `T${index + 1}: ${load.Torch}, t${index + 1}: ${load.time}
            <span class="text-danger ms-1" style="cursor: pointer;" onclick="removeBadge(${index})">x</span>
        `;
            badgesDiv.appendChild(badge);

            // Thêm gợi ý cho từng tải
            if (parseFloat(load.Torch) <= 0 || parseFloat(load.time) <= 0) {
                badge.style.backgroundColor = "orange"; // Màu sắc cảnh báo
                badge.innerHTML += `<span style="color: red;"> (Thông số không hợp lệ, vui lòng điều chỉnh)</span>`;
            }
        });

        // Lấy các giá trị từ input
        const F = parseFloat(forceInput.value);
        const v = parseFloat(speedInput.value);
        const N = 0.85676; // Định nghĩa hằng số N
        const maxPct = 160; // công suất động cơ tối đa (kW)

        const tlist = [];
        const Tlist = [];

        // Lấy thông tin từ các badge tải
        loads.forEach(load => {
            const T = parseFloat(load.Torch);
            const t = parseFloat(load.time);
            if (!isNaN(T) && !isNaN(t)) {
                Tlist.push(T);
                tlist.push(t);
            }
        });

        // Tính toán công suất yêu cầu Pct
        if (Tlist.length > 0 && !isNaN(F) && !isNaN(v)) {
            const Plv = F * v / 1000;

            let sum1 = 0, sum2 = 0;
            for (let i = 0; i < Math.min(Tlist.length, tlist.length); i++) {
                sum1 += tlist[i] * Tlist[i] * Tlist[i];
                sum2 += tlist[i];
            }

            const Ptd = Plv * (sum1 / sum2);
            const Pct = Ptd / N;

            // Cập nhật gợi ý cho lực vòng (F) và vận tốc (v)
            if (Pct > maxPct) {
                // Tính giá trị F và v tối đa để không vượt quá Pct
                const maxForce = maxPct * N / (v * sum1 / sum2);
                const maxSpeed = maxPct * N / (F * sum1 / sum2);

                forceSuggestion.innerHTML = `
                <div style="color: #d9534f; font-weight: bold">
                    Pct = ${Pct.toFixed(2)} kW vượt quá công suất động cơ tối đa (${maxPct} kW)
                </div>
                <div style="color: #d9534f">
                    Giảm lực vòng (F) xuống tối đa: ${maxForce.toFixed(2)} hoặc giảm vận tốc (v).
                </div>
            `;
                speedSuggestion.innerHTML = `
                <div style="color: #d9534f; font-weight: bold">
                    Pct = ${Pct.toFixed(2)} kW vượt quá công suất động cơ tối đa (${maxPct} kW)
                </div>
                <div style="color: #d9534f">
                    Giảm vận tốc (v) xuống tối đa: ${maxSpeed.toFixed(2)} hoặc giảm lực vòng (F).
                </div>
            `;
            } else {
                forceSuggestion.innerHTML = `
                <div style="color: #5bc0de; font-weight: bold">
                    Pct = ${Pct.toFixed(2)} kW. Thông số phù hợp!
                </div>
            `;
                speedSuggestion.innerHTML = `
                <div style="color: #5bc0de; font-weight: bold">
                    Pct = ${Pct.toFixed(2)} kW. Thông số phù hợp!
                </div>
            `;
            }

            // Cập nhật gợi ý cho từng chế độ tải (Torch, time)
            if (Pct > maxPct) {
                loads.forEach((load, index) => {
                    const T = parseFloat(load.Torch);
                    const t = parseFloat(load.time);
                    if (!isNaN(T) && !isNaN(t)) {
                        const loadPct = T * t * T / (tlist.reduce((sum, tItem) => sum + tItem, 0)); // tính Pct cho tải

                        if (loadPct > maxPct) {
                            const maxT = maxPct * N * t / (tlist.reduce((sum, tItem) => sum + tItem, 0)); // Giảm tải T
                            const maxTime = maxPct * N * T / (tlist.reduce((sum, tItem) => sum + tItem, 0)); // Giảm thời gian t

                            const badge = document.querySelectorAll("#loadBadges span")[index]; // tìm badge tương ứng
                            badge.innerHTML += `
                            <div style="color: #d9534f; font-size: 0.9em;"> 
                                Tải T${index + 1} vượt quá công suất tối đa, giảm T${index + 1} xuống ${maxT.toFixed(2)} hoặc t${index + 1} xuống ${maxTime.toFixed(2)}.
                            </div>
                        `;
                        }
                    }
                });
            }
        }
    }

    // Lắng nghe sự kiện thay đổi cho các input
    document.getElementById("forceInput").addEventListener("input", updateBadges);
    document.getElementById("speedInput").addEventListener("input", updateBadges);



    document.getElementById('submitButton').addEventListener('click', function (e) {
        e.preventDefault(); // Ngăn form reload trang
        submitFormData(); // Gọi hàm xử lý dữ liệu
    });

    function submitFormData() {
        // Lấy giá trị từ các input
        const force = parseFloat(document.getElementById('forceInput').value) || 0;
        const speed = parseFloat(document.getElementById('speedInput').value) || 0;
        const shaftType = document.getElementById('shaftSelection').value;
        const diameter = parseFloat(document.getElementById('diameterInput').value) || 0;
        const serviceTime = parseFloat(document.getElementById('serviceTimeInput').value) || 0;
        const workDays = parseFloat(document.getElementById('workDaysInput').value) || 0;
        const workHours = parseFloat(document.getElementById('workHoursInput').value) || 0;
        const startupMoment = parseFloat(document.getElementById('startupMoment').value) || 0;
        const loadMoment = parseFloat(document.getElementById('loadMoment').value) || 0;
        const transType = document.getElementById('transSelection').value; // Lấy bộ truyền

        // Validation: check if any field has invalid input
        if (force <= 0 || speed <= 0 || diameter <= 0 || serviceTime <= 0 || workDays <= 0 || workHours <= 0 || startupMoment <= 0 || loadMoment <= 0) {
            alert("Các giá trị phải lớn hơn 0.");
            return;
        }

        // Kiểm tra danh sách tải có tồn tại không
        if (!Array.isArray(loads) || loads.length === 0) {
            alert("Danh sách tải không hợp lệ!");
            return;
        }

        // Tạo danh sách T và t
        const Torchlist = loads.map(load => parseFloat(load.Torch) || 0);
        const tlist = loads.map(load => parseFloat(load.time) || 0);

        // Danh sách tải đầy đủ
        const loadData = loads.map((load, index) => ({
            Id: index + 1,
            Torch: parseFloat(load.Torch) || 0,
            time: parseFloat(load.time) || 0
        }));

        if (loadMoment === 0) return;

        // Tính loadN
        let loadN = Math.round((startupMoment / loadMoment) * 100) / 100; // Làm tròn 2 số thập phân

        // Tạo object dữ liệu
        const formData = {
            force,
            speed,
            shaftType,
            diameter,
            serviceTime,
            workDays,
            workHours,
            startupMoment,
            loadMoment,
            loadData,
            Torchlist,
            tlist,
            transType
        };

        console.log('Dữ liệu nhập vào:', formData);

        // Gửi dữ liệu lên server
        fetch('/Input/Submit', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(formData)
        }).then(response => {
            if (!response.ok) {
                throw new Error(`Lỗi HTTP ${response.status}: ${response.statusText}`);
            }
            return response.json();
        })
            .then(data => {
                // Lưu vào localStorage
                let storedData = JSON.parse(localStorage.getItem("inputData")) || [];
                storedData.push(data);
                localStorage.setItem("inputData", JSON.stringify(storedData));

                alert("Dữ liệu đã được lưu vào Local Storage!");

                localStorage.setItem("lastInputData", JSON.stringify({
                    ...formData,
                    ...data
                }));

                alert("Đang chuyển sang trang kết quả...");
                setTimeout(() => {
                    window.location.href = "/Input/Result";
                }, 1000);
            })
            .catch(error => {
                console.error("Lỗi khi gửi dữ liệu:", error);
                alert(`Có lỗi xảy ra: ${error.message}`);
            });


    }


    document.addEventListener('DOMContentLoaded', function () {
        displayStoredData();
    });

    function displayStoredData() {
        const savedData = JSON.parse(localStorage.getItem("inputData")) || [];
        console.log("Dữ liệu trong localStorage:", savedData);

        const savedDataTable = document.getElementById("savedDataTable");
        savedDataTable.innerHTML = "";

        savedData.forEach((item, index) => {
            const row = document.createElement("tr");

            row.innerHTML = `
                <td>${item.force}</td>
                <td>${item.speed}</td>
                <td>${item.shaftType}</td>
                <td>${item.diameter}</td>
                <td>${item.serviceTime}</td>
                <td>${item.workDays}</td>
                <td>${item.workHours}</td>
                <td>${item.startupMoment}</td>
                <td>${item.loadMoment}</td>
                <td>${item.overloadFactor}</td>
                <td>${item.overallEfficiency}</td>
                <td>${item.requiredMotorEfficiency}</td>
                <td>
                    ${item.loadData.map(load => `T${load.id}: ${load.torch}, t${load.id}: ${load.time}`).join(', ')}
                </td>
                <td>${item.transType}</td>
                <td>
                    <button class="btn btn-primary btn-sm select-btn" data-index="${index}">Chọn</button>
                    <button class="btn btn-danger btn-sm delete-btn" data-index="${index}">Xóa</button>
                </td>
            `;

            savedDataTable.appendChild(row);
        });

        // Gán sự kiện cho nút chọn sau khi thêm dữ liệu
        const buttons = document.querySelectorAll(".select-btn");
        buttons.forEach(button => {
            button.addEventListener("click", function () {
                const index = this.getAttribute("data-index");
                const selectedItem = savedData[index];
                populateForm(selectedItem);
            });
        });

        // Gán sự kiện cho nút xóa
        const deleteButtons = document.querySelectorAll(".delete-btn");
        deleteButtons.forEach(button => {
            button.addEventListener("click", function () {
                const index = this.getAttribute("data-index");
                savedData.splice(index, 1);
                localStorage.setItem("inputData", JSON.stringify(savedData));
                displayStoredData();
            });
        });

    }

    function populateForm(item) {
        document.getElementById("forceInput").value = item.force || '';
        document.getElementById("speedInput").value = item.speed || '';
        document.getElementById("shaftSelection").value = item.shaftType || '';
        document.getElementById("diameterInput").value = item.diameter || '';
        document.getElementById("serviceTimeInput").value = item.serviceTime || '';
        document.getElementById("workDaysInput").value = item.workDays || '';
        document.getElementById("workHoursInput").value = item.workHours || '';
        document.getElementById("startupMoment").value = item.startupMoment || '';
        document.getElementById("loadMoment").value = item.loadMoment || '';
        document.getElementById("transSelection").value = item.transType || '';

        // Gán lại mảng loads từ dữ liệu LocalStorage
        loads = item.loadData.map((load) => ({
            Torch: load.torch || load.Torch,
            time: load.time
        }));

        updateBadges(); // cập nhật lại UI
    }

    document.addEventListener("DOMContentLoaded", () => {
        const diameterInput = document.getElementById("diameterInput");
        const speedInput = document.getElementById("speedInput");

        const diameterSuggestion = document.getElementById("diameterSuggestion");
        const speedSuggestion = document.getElementById("speedSuggestion");

        const MOTOR_MIN = 1425;
        const MOTOR_MAX = 1485;
        const ratio = 46.08;

        function updateSuggestions() {
            const D = parseFloat(diameterInput.value);
            const v = parseFloat(speedInput.value);

            if (!D || !v || D <= 0 || v <= 0) {
                diameterSuggestion.innerHTML = `
        <div style="color: #d9534f; font-weight: bold">
            Vui lòng nhập đầy đủ và hợp lệ cả <strong>D</strong> và <strong>v</strong> để tính toán.
        </div>`;
                speedSuggestion.innerHTML = `
        <div style="color: #d9534f; font-weight: bold">
            Vui lòng nhập đầy đủ và hợp lệ cả <strong>D</strong> và <strong>v</strong> để tính toán.
        </div>`;
                return; // Dừng không tính tiếp
            }
            if (!isNaN(D) && !isNaN(v) && D > 0) {
                const n_lv = (60000 * v) / (Math.PI * D);
                const n_sb = n_lv * ratio;

                if (n_sb < MOTOR_MIN || n_sb > MOTOR_MAX) {
                    // Gợi ý D và v
                    const suggestedDMin = (60000 * v) / (Math.PI * (MOTOR_MAX / ratio));
                    const suggestedDMax = (60000 * v) / (Math.PI * (MOTOR_MIN / ratio));

                    const suggestedVMin = (Math.PI * D * (MOTOR_MIN / ratio)) / 60000;
                    const suggestedVMax = (Math.PI * D * (MOTOR_MAX / ratio)) / 60000;

                    diameterSuggestion.innerHTML = `
    <div style="color: #d9534f; font-weight: bold">
        n_sb = ${n_sb.toFixed(2)} vòng/phút không nằm trong khoảng [1425, 1485]
    </div>
    <div style="color: #d9534f">
        Gợi ý D nằm trong khoảng <strong>${suggestedDMin.toFixed(1)} mm</strong> - <strong>${suggestedDMax.toFixed(1)} mm</strong>
    </div>`;


                    speedSuggestion.innerHTML = `
    <div style="color: #f0ad4e">
        Hoặc điều chỉnh v nằm trong khoảng <strong>${suggestedVMin.toFixed(2)} m/s</strong> - <strong>${suggestedVMax.toFixed(2)} m/s</strong>
    </div>`;
                } else {
                    diameterSuggestion.innerHTML = `
    <div style="color: #5cb85c; font-weight: bold">
        D và v hợp lý (n_sb = ${n_sb.toFixed(2)} vòng/phút)
    </div>`;
                    speedSuggestion.innerHTML = "";
                }
            } else {
                diameterSuggestion.textContent = "";
                speedSuggestion.textContent = "";
            }
        }

        diameterInput.addEventListener("input", updateSuggestions);
        speedInput.addEventListener("input", updateSuggestions);
    });

</script>
