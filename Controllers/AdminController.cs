using Microsoft.AspNetCore.Mvc;
using System.Threading.Tasks;
using CloudinaryDotNet;
using CloudinaryDotNet.Actions;
using Microsoft.Extensions.Configuration;

public class AdminController : Controller
{
    private readonly ICatalogService _catalogService;
    private readonly IExtractionService _extractionService;
    private readonly Cloudinary _cloudinary;

    public AdminController(ICatalogService catalogService, IExtractionService extractionService, IConfiguration configuration)
    {
        _catalogService = catalogService;
        _extractionService = extractionService;

        // L·∫•y th√¥ng tin Cloudinary t·ª´ appsettings.json
        var cloudName = configuration["Cloudinary:CloudName"];
        var apiKey = configuration["Cloudinary:ApiKey"];
        var apiSecret = configuration["Cloudinary:ApiSecret"];

        _cloudinary = new Cloudinary(new Account(cloudName, apiKey, apiSecret));
    }

    // Hi·ªÉn th·ªã form upload
    [HttpGet]
    public IActionResult UploadCatalog()
    {
        return View();
    }

    // X·ª≠ l√Ω upload URL catalog
    [HttpPost]
    public async Task<IActionResult> UploadCatalog(string url)
    {
        if (string.IsNullOrWhiteSpace(url))
        {
            TempData["Error"] = "URL kh√¥ng h·ª£p l·ªá.";
            return RedirectToAction("UploadCatalog");
        }

        var extractedData = await _extractionService.ExtractDataFromWebAsync(url);

        if (extractedData == null)
        {
            TempData["Error"] = "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t d·ªØ li·ªáu.";
            return RedirectToAction("UploadCatalog");
        }

        // üõ† Render view ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªânh s·ª≠a th√¥ng tin
        return View("ConfirmCatalog", extractedData);
    }


    [HttpPost]
    public async Task<IActionResult> ConfirmCatalog(MotorCatalog catalog, List<IFormFile>? imageFiles)
    {
        if (imageFiles != null && imageFiles.Count > 0)
        {
            foreach (var imageFile in imageFiles)
            {
                var uploadParams = new ImageUploadParams
                {
                    File = new FileDescription(imageFile.FileName, imageFile.OpenReadStream()),
                    PublicId = $"motor_catalog/{Guid.NewGuid()}",
                    Overwrite = true
                };

                var uploadResult = await _cloudinary.UploadAsync(uploadParams);
                if (uploadResult.StatusCode == System.Net.HttpStatusCode.OK)
                {
                    catalog.ImageUrls.Add(uploadResult.SecureUrl.ToString());
                }
            }
        }

        await _catalogService.AddCatalogAsync(catalog);

        TempData["Success"] = "Th√¥ng tin ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t!";
        return RedirectToAction("CatalogList");
    }

    // Hi·ªÉn th·ªã danh s√°ch catalog
    [HttpGet]
    public async Task<IActionResult> CatalogList()
    {
        var catalogs = await _catalogService.GetAllAsync();
        return View(catalogs);
    }

    // Hi·ªÉn th·ªã form nh·∫≠p tay
    [HttpGet]
    public IActionResult AddMotorManual()
    {
        return View();
    }

    // X·ª≠ l√Ω th√™m catalog b·∫±ng nh·∫≠p tay
    [HttpPost]
    public async Task<IActionResult> AddMotorManual(MotorCatalog motor)
    {
        if (motor == null)
        {
            TempData["Error"] = "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá.";
            return RedirectToAction("AddMotorManual");
        }

        await _catalogService.AddCatalogAsync(motor);
        TempData["Success"] = "D·ªØ li·ªáu ƒë·ªông c∆° ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!";
        return RedirectToAction("CatalogList");
    }
}
